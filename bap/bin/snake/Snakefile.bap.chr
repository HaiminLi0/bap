import os
import subprocess
import shutil
import re

from os.path import join

configfile: config["cfp"]     
outdir = config["output"]
script_dir = config["script_dir"]          
R = config["R"] 
name = config["bam_name"] 
output = config["output"] 
barcode_tag = config["barcode_tag"] 
minimum_barcode_fragments = config["minimum_barcode_fragments"] 

# Determine .bam files to execute for fragment overlap analysis
infile1 = outdir + "/.internal/samples/" + "/" + name + ".chrbam.txt"
barcodeQuantFile =  outdir + "/final/" + name + ".barcodequants.csv"

with open(infile1) as f:
    SAMPLES = f.readlines()
SAMPLES = [x.strip() for x in SAMPLES] 
rdsin = [re.sub(".bam$", "_overlapCount.rds", x.replace("/filt_split/", "/frag_overlap/")) for x in SAMPLES]
simple = [re.sub(".bam$", "", x.replace(output + "/temp/filt_split/", "")) for x in SAMPLES]

fragOverlaps_R = script_dir + "/bin/R/12_fragOverlapMetricsChr.R"
determineDoubles_R = script_dir + "/bin/R/13_callDoublets.R"

rule all:
	input:
		outdir + "/final/"+name+".implicatedBarcodes.csv"

rule process_one_chromosome:
	input:
		bam = output + "/temp/filt_split/" + "{name}" + ".bam"
	output:
		outrds =  output + "/temp/frag_overlap/" + "{name}" + "_overlapCount.rds"
	threads:
		1
	run:
		# Process one chromosome file
		r_call1 = " ".join([R+"script", fragOverlaps_R, input.bam, barcode_tag, barcodeQuantFile])
		os.system(r_call1)

# Collate everything
rule determine_barcode_merges:
	input:
		rdsin = rdsin
	output:
		outcsv = outdir + "/final/"+name+".implicatedBarcodes.csv"
	run: 	
		# collate chr inference and make a single file
		rdsdir = outdir + "/temp/frag_overlap"
		r_call2 = " ".join([R+"script", determineDoubles_R, rdsdir, output.outcsv])
		print(r_call2)
		os.system(r_call2)
